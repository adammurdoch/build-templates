import freemarker.cache.StringTemplateLoader
import freemarker.template.Configuration

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.freemarker:freemarker:2.3.23'
    }
}

plugins {
    id 'base'
}

class Repo {
    URI uri
}

class BuildModel {
    ProjectModel rootProject = new ProjectModel()
    List<ProjectModel> subprojects = []
}

class ProjectModel {
    String name

}

abstract class SourceProjectModel extends ProjectModel {
    String getBasePackage() {
        return "org.test." + name.toLowerCase()
    }

    abstract boolean isLibrary()

    abstract SourceFileModel getEntryPoint()

    List<SourceFileModel> getProductionClasses() {
        return [
            entryPoint,
            new SourceFileModel(project: this, name: 'Util1'),
            new SourceFileModel(project: this, name: 'Util2'),
            new SourceFileModel(project: this, name: 'Util3')
        ]
    }

    List<SourceFileModel> getTestClasses() {
        return [
            new SourceFileModel(project: this, name: "UnitTest", referencedClass: entryPoint)
        ]
    }
}

class AppModel extends SourceProjectModel {
    boolean isLibrary() { false }

    @Override
    SourceFileModel getEntryPoint() {
        return new SourceFileModel(project: this, name: "AppMain")
    }
}

class LibraryModel extends SourceProjectModel {
    boolean isLibrary() { true }

    @Override
    SourceFileModel getEntryPoint() {
        return new SourceFileModel(project: this, name: "Lib")
    }
}

class SourceFileModel {
    SourceProjectModel project
    String name
    SourceFileModel referencedClass

    String getPackage() {
        return project.basePackage
    }

    String getQualifiedName() {
        return "${project.basePackage}.${name}"
    }

    String getSourceFileName() {
        return qualifiedName.replace('.', '/') + ".java"
    }
}

class TemplateTask extends DefaultTask {
    @OutputDirectory
    File outputDir

    @TaskAction
    def generate() {
        def configuration = new Configuration(Configuration.VERSION_2_3_23)
        def loader = new StringTemplateLoader()
        configuration.templateLoader = loader
        generate(configuration, loader)
    }

    def generate(Configuration configuration, StringTemplateLoader loader) {
    }

    def generateFile(Configuration configuration, Object root, String templateName, String outputFileName, File outputDir) {
        def template = configuration.getTemplate(templateName)
        def outputFile = new File(outputDir, outputFileName)
        outputFile.parentFile.mkdirs()
        outputFile.withWriter { w -> 
            template.process(root, w)
        }
    }
}

class GradleBuildTask extends TemplateTask {
    @InputFile
    File settingsTemplate

    @InputFile
    File rootProjectTemplate

    @InputFile
    File projectTemplate

    @InputFile
    File sourceTemplate

    @InputFile
    File testSourceTemplate

    BuildModel build

    @Override
    def generate(Configuration configuration, StringTemplateLoader loader) {
        loader.putTemplate("root-build.gradle", rootProjectTemplate.text)
        loader.putTemplate("project-build.gradle", projectTemplate.text)
        loader.putTemplate("settings.gradle", settingsTemplate.text)
        loader.putTemplate("source.java", sourceTemplate.text)
        loader.putTemplate("test.java", testSourceTemplate.text)
        generateFile(configuration, [build: build], "settings.gradle", "settings.gradle", outputDir)
        generateFile(configuration, [project: build.rootProject], "root-build.gradle", "build.gradle", outputDir)
        build.subprojects.each { p ->
            generateFile(configuration, [project: p], "project-build.gradle", "${p.name}/build.gradle", outputDir)
            for (def c : p.productionClasses) {
                generateFile(configuration, [project: p, class: c], "source.java", "${p.name}/src/main/java/${c.sourceFileName}", outputDir)
            }
            for (def c : p.testClasses) {
                generateFile(configuration, [project: p, class: c], "test.java", "${p.name}/src/test/java/${c.sourceFileName}", outputDir)
            }
        }
    }
}

class MavenCoords {
    String group = "test"
    String name
    String version = "1.0"
}

class ModuleModel extends MavenCoords {
    List<MavenDependency> dependencies = []
}

class MavenDependency extends MavenCoords {
    String scope
}

class MavenRepoTask extends TemplateTask {
    @InputFile File pomTemplate

    @Override
    def generate(Configuration configuration, StringTemplateLoader loader) {
        loader.putTemplate("pom.xml", pomTemplate.text)
        generateTree(configuration, 'test-compile')
        generateTree(configuration, 'test-compile2')
        generateTree(configuration, 'test-runtime')
        generateTree(configuration, 'test-provided')
        generateTree(configuration, 'test-test')
    }

    def generateTree(Configuration configuration, String name) {
        def main = new ModuleModel(name: name)
        main.dependencies << new MavenDependency(name: "${name}-compile")
        main.dependencies << new MavenDependency(name: "${name}-compile2", scope: 'compile')
        main.dependencies << new MavenDependency(name: "${name}-runtime", scope: 'runtime')
        main.dependencies << new MavenDependency(name: "${name}-provided", scope: 'provided')
        main.dependencies << new MavenDependency(name: "${name}-test", scope: 'test')
        generatePom(configuration, main)
        generatePom(configuration, new ModuleModel(name: "${name}-compile"))
        generatePom(configuration, new ModuleModel(name: "${name}-compile2"))
        generatePom(configuration, new ModuleModel(name: "${name}-runtime"))
        generatePom(configuration, new ModuleModel(name: "${name}-provided"))
        generatePom(configuration, new ModuleModel(name: "${name}-test"))
    }

    def generatePom(Configuration configuration, ModuleModel module) {
        def pomPath = "${module.group}/${module.name}/${module.version}/${module.name}-${module.version}.pom"
        def jarPath = "${module.group}/${module.name}/${module.version}/${module.name}-${module.version}.jar"

        generateFile(configuration, [module: module], "pom.xml", pomPath, outputDir)

        def jarFile = new File(outputDir, jarPath)
        jarFile.parentFile.mkdirs()
        jarFile.createNewFile()
    }
}

class MavenBuildTask extends TemplateTask {
    @InputFile File pomTemplate

    @Override
    def generate(Configuration configuration, StringTemplateLoader loader) {
        loader.putTemplate("pom.xml", pomTemplate.text)
        def module = new ModuleModel(name: 'main')
        module.dependencies << new MavenDependency(name: 'test-compile')
        module.dependencies << new MavenDependency(name: 'test-compile2', scope: 'compile')
        module.dependencies << new MavenDependency(name: 'test-runtime', scope: 'runtime')
        module.dependencies << new MavenDependency(name: 'test-provided', scope: 'provided')
        module.dependencies << new MavenDependency(name: 'test-test', scope: 'test')
        generateFile(configuration, [module: module, repo: new Repo(uri: project.file("build/mavenRepo").toURI())], "pom.xml", "pom.xml", outputDir)
    }
}

task mavenRepo(type: MavenRepoTask) {
    outputDir = file("$buildDir/mavenRepo")
    pomTemplate = file("templates/maven/repo/pom.xml.ftl")
}

task mavenBuild(type: MavenBuildTask) {
    dependsOn mavenRepo
    outputDir = file("$buildDir/maven")
    pomTemplate = file("templates/maven/build/pom.xml.ftl")
}

task androidApp(type: GradleBuildTask) {
    dependsOn mavenRepo
    outputDir = file("$buildDir/android")
    settingsTemplate = file("templates/common/settings.gradle.ftl")
    rootProjectTemplate = file("templates/android/build.gradle.ftl")
    projectTemplate = file("templates/android/project/build.gradle.ftl")
    sourceTemplate = file("templates/java/project/library.java.ftl")
    testSourceTemplate = file("templates/java/project/libraryTest.java.ftl")

    build = new BuildModel()
    build.rootProject.name = 'TestApp'
    build.subprojects.add(new AppModel(name: 'app'))
    build.subprojects.add(new LibraryModel(name: 'lib1'))
    build.subprojects.add(new LibraryModel(name: 'lib2'))
}

task javaApp(type: GradleBuildTask) {
    dependsOn mavenRepo
    outputDir = file("$buildDir/java")
    settingsTemplate = file("templates/common/settings.gradle.ftl")
    rootProjectTemplate = file("templates/java/build.gradle.ftl")
    projectTemplate = file("templates/java/project/build.gradle.ftl")
    sourceTemplate = file("templates/java/project/library.java.ftl")
    testSourceTemplate = file("templates/java/project/libraryTest.java.ftl")

    build = new BuildModel()
    build.rootProject.name = 'TestApp'
    build.subprojects.add(new AppModel(name: 'app'))
    build.subprojects.add(new LibraryModel(name: 'lib1'))
    build.subprojects.add(new LibraryModel(name: 'lib2'))
}
